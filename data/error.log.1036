	SEND_EMAIL_ON_ERROR=1
2018-11-23 10:36:25,325 [INFO ] [main           ] Msg: registerType: MsgDesc[FWRK.CONF.activation.response, fields=[[0]->[status, 1] [1]->[errorMessage, 7] ]]
2018-11-23 10:36:25,326 [INFO ] [main           ] Msg: registerType: MsgDesc[FWRK.CONF.properties.response, fields=[[0]->[processProperties, 29] [1]->[errorMessage, 7] [2]->[processDependencies, 29] [3]->[processStandby, 6] [4]->[configServerIsActive, 6] ]]
2018-11-23 10:36:25,326 [INFO ] [main           ] Msg: registerType: MsgDesc[FWRK.CONF.dependency.response, fields=[[0]->[processType, 7] [1]->[processLocalization, 7] [2]->[processMode, 7] [3]->[processDependencies, 29] [4]->[alias, 7] [5]->[errorMessage, 7] [6]->[configServerIsActive, 6] [7]->[processIsEnabled, 6] ]]
2018-11-23 10:36:25,328 [INFO ] [main           ] Msg: registerType: MsgDesc[FWRK.CONF.admin.response, fields=[[0]->[errorMessage, 7] [1]->[isForcePossible, 6] [2]->[configServerIsActive, 6] ]]
2018-11-23 10:36:25,328 [INFO ] [main           ] Msg: registerType: MsgDesc[CONF.RES, fields=[[0]->[processProperties, 29] [1]->[errorMessage, 7] [2]->[processDependencies, 29] [3]->[processStandby, 6] ]]
2018-11-23 10:36:27,241 [ERROR] [MAIN           ] BrokerClient: Unable to register com.ingalys.imc.svc.safety.hspersist.SafetyBaseRegistrator
2018-11-23 10:36:27,284 [INFO ] [oreRegister-2-4] Msg: registerType: MsgDesc[_PST.SELECT.RESPONSE, fields=[[0]->[status, 1] [1]->[errorMessage, 7] [2]->[data, 12] ]]
2018-11-23 10:36:27,284 [INFO ] [oreRegister-2-4] Msg: registerType: MsgDesc[_PST.OPTMIZED_SELECT.RESPONSE, fields=[[0]->[status, 1] [1]->[errorMessage, 7] [2]->[data, 84] ]]
2018-11-23 10:36:30,569 [INFO ] [MAIN           ] Msg: registerType: MsgDesc[STATUS, fields=[[0]->[productId, 7] [1]->[scenarioId, 7] [2]->[qtyOnMarket, 1] [3]->[priceOnMarket, 5] [4]->[qtySent, 1] [5]->[priceSent, 5] [6]->[scenarioStatus, 1] [7]->[nbMsgSent, 1] [8]->[lastAction, 1] [9]->[type, 2] [10]->[lastErrorMessage, 7] [11]->[timestamp, 3] [12]->[priceInternal, 5] ]]
2018-11-23 10:36:31,151 [INFO ] [MAIN           ] Msg: registerType: MsgDesc[MM_UKO_A, fields=[[0]->[success, 6] [1]->[errorMsg, 7] ]]
2018-11-23 10:36:31,539 [INFO ] [MAIN           ] Msg: registerType: MsgDesc[EXEC_DIFF_SERVICE_RESPONSE, fields=[[0]->[status, 1] [1]->[errorMessage, 7] [2]->[failedTrades, 27] ]]
2018-11-23 10:36:31,672 [INFO ] [MAIN           ] Msg: registerType: MsgDesc[MPV_REFRESH_ERROR, fields=[[0]->[errorDesc, 7] ]]
2018-11-23 10:36:36,521 [INFO ] [MAIN           ] USSImpl: Registering table 'hsbroker.broker.marketoncloserulesource' (dispatch thread=broker-uss, parameters=[mic], fields=[mic(S:inf), sendErrorOffsetInMin(I), cancelWarnOffsetInMin(I), cancelErrorOffsetInMin(I)], settings={name=marketoncloserulesource, alias=MarketOnCloseRuleSource, useWeakRecordStore=false, hidden=true})
2018-11-23 10:36:36,521 [INFO ] [MAIN           ] USSImpl: Registering channel 'hsbroker.broker.marketoncloserulesource' (dispatch thread=broker-uss, parameters=[mic], fields=[mic(S:inf), sendErrorOffsetInMin(I), cancelWarnOffsetInMin(I), cancelErrorOffsetInMin(I)], type=null, alias=MarketOnCloseRuleSource)
2018-11-23 10:36:36,528 [INFO ] [MAIN           ] USSImpl: Registering table 'hsbroker.broker.rfqblotter' (dispatch thread=broker-uss, parameters=[quoteRequestId], fields=[quoteRequestId(S:inf), userId(S:inf), brokerId(S:inf), productId(S:inf), exchangeMic(S:inf), requestTimestamp(Dt), replyTimestamp(Dt), tradeTimestamp(Dt), responseType(S:inf), responseTypeSource(S:inf), status(S:inf), quoteReplyId(S:inf), buyQty(I), buyPrice(D), sellQty(I), sellPrice(D), errorMessage(S:inf)], settings={name=rfqblotter, alias=RFQBlotter, useWeakRecordStore=false, hidden=true})
2018-11-23 10:36:36,528 [INFO ] [MAIN           ] USSImpl: Registering channel 'hsbroker.broker.rfqblotter' (dispatch thread=broker-uss, parameters=[quoteRequestId], fields=[quoteRequestId(S:inf), userId(S:inf), brokerId(S:inf), productId(S:inf), exchangeMic(S:inf), requestTimestamp(Dt), replyTimestamp(Dt), tradeTimestamp(Dt), responseType(S:inf), responseTypeSource(S:inf), status(S:inf), quoteReplyId(S:inf), buyQty(I), buyPrice(D), sellQty(I), sellPrice(D), errorMessage(S:inf)], type=null, alias=RFQBlotter)
2018-11-23 10:36:36,535 [INFO ] [MAIN           ] USSImpl: Registering table 'hsbroker.broker.externalpricingconfiguration' (dispatch thread=broker-uss, parameters=[productId, context, ulId], fields=[productId(S:inf), context(S:inf), ulId(S:inf), staleWarningDelayMs(I), staleErrorDelayMs(I), refreshLimiterPeriodMs(I)], settings={name=externalpricingconfiguration, alias=ExternalPricingConfiguration, useWeakRecordStore=false, hidden=true})
2018-11-23 10:36:36,535 [INFO ] [MAIN           ] USSImpl: Registering channel 'hsbroker.broker.externalpricingconfiguration' (dispatch thread=broker-uss, parameters=[productId, context, ulId], fields=[productId(S:inf), context(S:inf), ulId(S:inf), staleWarningDelayMs(I), staleErrorDelayMs(I), refreshLimiterPeriodMs(I)], type=null, alias=ExternalPricingConfiguration)
2018-11-23 10:36:36,558 [INFO ] [MAIN           ] USSImpl: Registering table 'hsbroker.broker.pendingexecution' (dispatch thread=broker-uss, parameters=[generatedId], fields=[generatedId(S:inf), execType(S:inf), tradeId(S:inf), portfolioId(S:inf), brokerExchangeId(S:inf), mic(S:inf), userId(S:inf), imsId(S:inf), orderId(S:inf), way(S:inf), quantity(I), price(D), timestamp(Dt), imsUserId(S:inf), userData(S:inf), marketData(S:inf), executionState(S:inf), productId(S:inf), context(S:inf), toHedge(B), sessionId(S:inf), hedgeUlId(S:inf), hedgeRatio(D), hedgeUlSpot(D), hedgeProxyUlSpot(D), exchangeFees(D), clearingFees(D), brokerageFees(D), crossTradeId(S:inf), feesData(S:inf), isComplete(B), ignoreInPosition(B), marketTradeId(S:inf), productToHedgeForex(D), ulId(S:inf), productToUlForex(D), errorMessage(S:inf), shortSellType(S:inf), tradeType(S:inf), currencyId(S:inf), eventTimestamp(Dt), version(I), brokerName(S:inf), boughtAmount(D), boughtCurrency(S:inf), soldAmount(D), soldCurrency(S:inf), immediateHedgePercent(D), immediateHedgeStrategy(S:inf), originalOrderPrice(D), originalOrderQuantity(I), orderTimestamp(Dt), execMarketData(S:inf), settlementDate(Dt), settlementFees(D), comments(S:inf), imsChannelType(I), productToPositionForex(D), positionEffect(I), strategyId(S:inf), strategyTradeId(S:inf), peerCustomFields(S:inf), peerUId(S:inf), blockTradeType(S:inf)], settings={name=pendingexecution, alias=PendingExecution, useWeakRecordStore=false, hidden=true})
2018-11-23 10:36:36,558 [INFO ] [MAIN           ] USSImpl: Registering channel 'hsbroker.broker.pendingexecution' (dispatch thread=broker-uss, parameters=[generatedId], fields=[generatedId(S:inf), execType(S:inf), tradeId(S:inf), portfolioId(S:inf), brokerExchangeId(S:inf), mic(S:inf), userId(S:inf), imsId(S:inf), orderId(S:inf), way(S:inf), quantity(I), price(D), timestamp(Dt), imsUserId(S:inf), userData(S:inf), marketData(S:inf), executionState(S:inf), productId(S:inf), context(S:inf), toHedge(B), sessionId(S:inf), hedgeUlId(S:inf), hedgeRatio(D), hedgeUlSpot(D), hedgeProxyUlSpot(D), exchangeFees(D), clearingFees(D), brokerageFees(D), crossTradeId(S:inf), feesData(S:inf), isComplete(B), ignoreInPosition(B), marketTradeId(S:inf), productToHedgeForex(D), ulId(S:inf), productToUlForex(D), errorMessage(S:inf), shortSellType(S:inf), tradeType(S:inf), currencyId(S:inf), eventTimestamp(Dt), version(I), brokerName(S:inf), boughtAmount(D), boughtCurrency(S:inf), soldAmount(D), soldCurrency(S:inf), immediateHedgePercent(D), immediateHedgeStrategy(S:inf), originalOrderPrice(D), originalOrderQuantity(I), orderTimestamp(Dt), execMarketData(S:inf), settlementDate(Dt), settlementFees(D), comments(S:inf), imsChannelType(I), productToPositionForex(D), positionEffect(I), strategyId(S:inf), strategyTradeId(S:inf), peerCustomFields(S:inf), peerUId(S:inf), blockTradeType(S:inf)], type=null, alias=PendingExecution)
2018-11-23 10:36:36,563 [INFO ] [MAIN           ] USSImpl: Registering table 'hsbroker.broker.rfqblotterhistoric' (dispatch thread=broker-uss, parameters=[quoteRequestId, archiveTimestamp], fields=[quoteRequestId(S:inf), archiveTimestamp(Dt), userId(S:inf), brokerId(S:inf), productId(S:inf), exchangeMic(S:inf), requestTimestamp(Dt), replyTimestamp(Dt), tradeTimestamp(Dt), responseType(S:inf), responseTypeSource(S:inf), status(S:inf), quoteReplyId(S:inf), buyQty(I), buyPrice(D), sellQty(I), sellPrice(D), errorMessage(S:inf)], settings={name=rfqblotterhistoric, alias=RFQBlotterHistoric, useWeakRecordStore=false, hidden=true})
2018-11-23 10:36:36,563 [INFO ] [MAIN           ] USSImpl: Registering channel 'hsbroker.broker.rfqblotterhistoric' (dispatch thread=broker-uss, parameters=[quoteRequestId, archiveTimestamp], fields=[quoteRequestId(S:inf), archiveTimestamp(Dt), userId(S:inf), brokerId(S:inf), productId(S:inf), exchangeMic(S:inf), requestTimestamp(Dt), replyTimestamp(Dt), tradeTimestamp(Dt), responseType(S:inf), responseTypeSource(S:inf), status(S:inf), quoteReplyId(S:inf), buyQty(I), buyPrice(D), sellQty(I), sellPrice(D), errorMessage(S:inf)], type=null, alias=RFQBlotterHistoric)
2018-11-23 10:36:36,565 [INFO ] [MAIN           ] USSImpl: Registering table 'hsbroker.broker.tradebooking' (dispatch thread=broker-uss, parameters=[tradeId, tradeLegId], fields=[tradeId(S:inf), tradeLegId(S:inf), execType(S:inf), tradeType(S:inf), bookId(S:inf), counterpartyId(S:inf), status(S:inf), bookingSystem(S:inf), bookingError(S:inf), bookingId(S:inf), tradeTimestamp(Dt), statusTimestamp(Dt), messageFormat(S:inf), messageFormatVersion(S:inf), messageHeaderVersion(S:inf), applicationId(S:inf), replyDownStream(S:inf), source(S:inf), messageTimestamp(Dt), messageType(S:inf), targetDownStream(S:inf), messageId(S:inf), applicationSource(S:inf), eventType(S:inf), subEventType(S:inf), location(S:inf), way(S:inf), tradeRevision(I), inputBy(S:inf), legalEntity(S:inf), quantity(I), price(D), principal(D), securityId(S:inf), securityType(S:inf), settlementCurrency(S:inf), settlementDate(Dt), downStreamStrategy(S:inf), tradeCurrency(S:inf), localTradeTimeStamp(Dt), traderId(S:inf), tradingArea(S:inf), dealCondition(S:inf), accruedInterest(D)], settings={name=tradebooking, alias=TradeBooking, useWeakRecordStore=false, hidden=true})
2018-11-23 10:36:36,566 [INFO ] [MAIN           ] USSImpl: Registering channel 'hsbroker.broker.tradebooking' (dispatch thread=broker-uss, parameters=[tradeId, tradeLegId], fields=[tradeId(S:inf), tradeLegId(S:inf), execType(S:inf), tradeType(S:inf), bookId(S:inf), counterpartyId(S:inf), status(S:inf), bookingSystem(S:inf), bookingError(S:inf), bookingId(S:inf), tradeTimestamp(Dt), statusTimestamp(Dt), messageFormat(S:inf), messageFormatVersion(S:inf), messageHeaderVersion(S:inf), applicationId(S:inf), replyDownStream(S:inf), source(S:inf), messageTimestamp(Dt), messageType(S:inf), targetDownStream(S:inf), messageId(S:inf), applicationSource(S:inf), eventType(S:inf), subEventType(S:inf), location(S:inf), way(S:inf), tradeRevision(I), inputBy(S:inf), legalEntity(S:inf), quantity(I), price(D), principal(D), securityId(S:inf), securityType(S:inf), settlementCurrency(S:inf), settlementDate(Dt), downStreamStrategy(S:inf), tradeCurrency(S:inf), localTradeTimeStamp(Dt), traderId(S:inf), tradingArea(S:inf), dealCondition(S:inf), accruedInterest(D)], type=null, alias=TradeBooking)
2018-11-23 10:36:36,572 [INFO ] [MAIN           ] USSImpl: Registering table 'hsbroker.broker.tradebookinghistoric' (dispatch thread=broker-uss, parameters=[tradeId, tradeLegId, archiveTimestamp], fields=[tradeId(S:inf), tradeLegId(S:inf), archiveTimestamp(Dt), execType(S:inf), tradeType(S:inf), bookId(S:inf), counterpartyId(S:inf), status(S:inf), bookingSystem(S:inf), bookingError(S:inf), bookingId(S:inf), tradeTimestamp(Dt), statusTimestamp(Dt), messageFormat(S:inf), messageFormatVersion(S:inf), messageHeaderVersion(S:inf), applicationId(S:inf), replyDownStream(S:inf), source(S:inf), messageTimestamp(Dt), messageType(S:inf), targetDownStream(S:inf), messageId(S:inf), applicationSource(S:inf), eventType(S:inf), subEventType(S:inf), location(S:inf), way(S:inf), tradeRevision(I), inputBy(S:inf), legalEntity(S:inf), quantity(I), price(D), principal(D), securityId(S:inf), securityType(S:inf), settlementCurrency(S:inf), settlementDate(Dt), downStreamStrategy(S:inf), tradeCurrency(S:inf), localTradeTimeStamp(Dt), traderId(S:inf), tradingArea(S:inf), dealCondition(S:inf), accruedInterest(D)], settings={name=tradebookinghistoric, alias=TradeBookingHistoric, useWeakRecordStore=false, hidden=true})
2018-11-23 10:36:36,572 [INFO ] [MAIN           ] USSImpl: Registering channel 'hsbroker.broker.tradebookinghistoric' (dispatch thread=broker-uss, parameters=[tradeId, tradeLegId, archiveTimestamp], fields=[tradeId(S:inf), tradeLegId(S:inf), archiveTimestamp(Dt), execType(S:inf), tradeType(S:inf), bookId(S:inf), counterpartyId(S:inf), status(S:inf), bookingSystem(S:inf), bookingError(S:inf), bookingId(S:inf), tradeTimestamp(Dt), statusTimestamp(Dt), messageFormat(S:inf), messageFormatVersion(S:inf), messageHeaderVersion(S:inf), applicationId(S:inf), replyDownStream(S:inf), source(S:inf), messageTimestamp(Dt), messageType(S:inf), targetDownStream(S:inf), messageId(S:inf), applicationSource(S:inf), eventType(S:inf), subEventType(S:inf), location(S:inf), way(S:inf), tradeRevision(I), inputBy(S:inf), legalEntity(S:inf), quantity(I), price(D), principal(D), securityId(S:inf), securityType(S:inf), settlementCurrency(S:inf), settlementDate(Dt), downStreamStrategy(S:inf), tradeCurrency(S:inf), localTradeTimeStamp(Dt), traderId(S:inf), tradingArea(S:inf), dealCondition(S:inf), accruedInterest(D)], type=null, alias=TradeBookingHistoric)
2018-11-23 10:36:36,577 [INFO ] [MAIN           ] USSImpl: Registering table 'hsbroker.broker.scheduler' (dispatch thread=broker-uss, parameters=[taskId], fields=[taskId(I), scheduleCommand(S:inf), taskName(S:inf), month(I), dayOfMonth(I), daysOfWeek(I), weekNumber(I), dayOfWeekNumber(I), scheduleTime(S:inf), scheduleTimezone(S:inf), checkBeforeExecutionDelay(I), scheduleCommandParameters(S:inf), context(S:inf), description(S:inf), isEnabled(B), onSuccessTaskId(I), onWarningTaskId(I), onErrorTaskId(I), owner(S:inf), isTemplate(B), useTemplate(B), templateTaskId(I)], settings={name=scheduler, alias=Scheduler, useWeakRecordStore=false, hidden=true})
2018-11-23 10:36:36,577 [INFO ] [MAIN           ] USSImpl: Registering channel 'hsbroker.broker.scheduler' (dispatch thread=broker-uss, parameters=[taskId], fields=[taskId(I), scheduleCommand(S:inf), taskName(S:inf), month(I), dayOfMonth(I), daysOfWeek(I), weekNumber(I), dayOfWeekNumber(I), scheduleTime(S:inf), scheduleTimezone(S:inf), checkBeforeExecutionDelay(I), scheduleCommandParameters(S:inf), context(S:inf), description(S:inf), isEnabled(B), onSuccessTaskId(I), onWarningTaskId(I), onErrorTaskId(I), owner(S:inf), isTemplate(B), useTemplate(B), templateTaskId(I)], type=null, alias=Scheduler)
2018-11-23 10:36:42,033 [INFO ] [MAIN           ] AutomaticIndexer: Turning off WARN and ERROR logs on this logger (got 100 in 31ms, min delay = 1000ms)
2018-11-23 10:36:43,938 [INFO ] [-ASYNC_BACKUP-5] DictUtils: Turning off WARN and ERROR logs on this logger (got 100 in 632ms, min delay = 1000ms)
2018-11-23 10:36:44,908 [INFO ] [MAIN           ] Msg: registerType: MsgDesc[_PST.PUT.RESPONSE, fields=[[0]->[status, 1] [1]->[errorMessage, 7] [2]->[failedRows, 12] [3]->[failedMessages, 12] ]]
2018-11-23 10:39:42,907 [INFO ] [IMC-omx        ] NasdaqNordicStatus: Turning off WARN and ERROR logs on this logger (got 100 in 901ms, min delay = 1000ms)
2018-11-23 10:47:56,204 [INFO ] [IMC-omx        ] NasdaqNordicStatus: Re-enabling WARN and ERROR logs (387 logs dropped)
